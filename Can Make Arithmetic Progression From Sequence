#include <iostream>
#include <vector>

using namespace std;

bool canFormArithmeticProgression(vector<int>& arr) {
    int n = arr.size();
    if (n <= 1) return true; // Trivially an AP if there's 0 or 1 element
    
    // Sort the array manually (using a simple bubble sort since <algorithm> is not allowed)
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j + 1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    
    // Check if differences between consecutive elements are the same
    int diff = arr[1] - arr[0];
    for (int i = 2; i < n; ++i) {
        if (arr[i] - arr[i - 1] != diff) {
            return false;
        }
    }
    
    return true;
}

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    
    vector<int> arr(n);
    cout << "Enter " << n << " elements for the array: ";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    
    cout << "Input array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
    
    bool result = canFormArithmeticProgression(arr);
    cout << "Can the array form an arithmetic progression after rearrangement? ";
    cout << (result ? "Yes" : "No") << endl;
    
    return 0;
}
